<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Linux on Notes to self </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://bertvv.github.io/notes-to-self/tags/linux/</link>
    <language>en-us</language>
    <author>Bert Van Vreckem</author>
    <copyright>Â© 2015 Bert Van Vreckem. Creative Commons Attribution 4.0. Please attribute properly and link back.</copyright>
    <updated>Fri, 11 Dec 2015 20:49:16 CET</updated>
    
    <item>
      <title>Testing Ansible roles with Travis-CI, Part 1: CentOS</title>
      <link>https://bertvv.github.io/notes-to-self/2015/12/11/testing-ansible-roles-with-travis-ci-part-1-centos</link>
      <pubDate>Fri, 11 Dec 2015 20:49:16 CET</pubDate>
      <author>Bert Van Vreckem</author>
      <guid>https://bertvv.github.io/notes-to-self/2015/12/11/testing-ansible-roles-with-travis-ci-part-1-centos</guid>
      <description>

&lt;p&gt;In this first post on testing Ansible roles with Travis-CI, we&amp;rsquo;ll discuss how you can apply a test playbook on CentOS. Out-of-the-box, Travis-CI doesn&amp;rsquo;t support CentOS, as its test environment is Ubuntu-based. However, Travis-CI allows you to set up a Docker container and this opens up all kinds of possibilities.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve known about &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt; as a test platform for a while now, but haven&amp;rsquo;t tried it out until a few days ago. It is mainly used for running tests on applications, but it has seen use for infrastructure testing as well. For example, Jeff Geerling already &lt;a href=&#34;https://servercheck.in/blog/testing-ansible-roles-travis-ci-github&#34;&gt;wrote about testing Ansible roles&lt;/a&gt; using Travis-CI.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot to like about Travis-CI: it&amp;rsquo;s free for open source projects and it integrates nicely with Github so that on every push and submitted pull request a test run is triggered. During a test run, a VM is booted and a script called &lt;code&gt;.travis.yml&lt;/code&gt; is executed. This contains the necessary steps to configure the system, install dependencies and run the actual test code. Jeff Geerling&amp;rsquo;s method of testing Ansible roles consists of installing Ansible and then running a test playbook locally that applies the role to the VM.&lt;/p&gt;

&lt;p&gt;Now, the reason that I haven&amp;rsquo;t been working with Travis-CI before (apart from lack of time), is that the VM that&amp;rsquo;s being created is Ubuntu-based. I&amp;rsquo;m mostly working with CentOS, however, and all &lt;a href=&#34;https://galaxy.ansible.com/detail#/user/8834&#34;&gt;my Ansible roles&lt;/a&gt; only run on CentOS (at least for now). So as far as I knew, Travis-CI was not suitable for my needs.&lt;/p&gt;

&lt;p&gt;Earlier this week, I ran into a &lt;a href=&#34;https://stackoverflow.com/questions/29453017/build-project-on-centos-using-travis&#34;&gt;question on StackOverflow&lt;/a&gt; on this very subject. One of the replies stated that it is possible to run CentOS on Travis-CI using Docker. Interesting&amp;hellip;&lt;/p&gt;

&lt;p&gt;Docker is another technology I haven&amp;rsquo;d played with before, so two learning opportunities in one go! I&amp;rsquo;m not going to delve into getting started with Docker, &lt;a href=&#34;https://docs.docker.com/engine/userguide/basics/&#34;&gt;you can find that elsewhere&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-centos-docker-container:48d64d145fbcb082238fb5b7d00b35e8&#34;&gt;Setting up a CentOS Docker container&lt;/h2&gt;

&lt;p&gt;In this section, we&amp;rsquo;re going to set up a simple test for my own &lt;a href=&#34;https://galaxy.ansible.com/detail#/role/3047&#34;&gt;Apache role&lt;/a&gt;.
The first step is to create a Docker container for CentOS with all dependencies installed. After a few attempts, I settled for the following Dockerfile:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;FROM centos:7
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Install systemd -- See https://hub.docker.com/_/centos/&lt;/span&gt;
RUN yum -y swap -- remove fakesystemd -- install systemd systemd-libs
RUN yum -y update; yum clean all; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;cd&lt;/span&gt; /lib/systemd/system/sysinit.target.wants/; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i in *; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; systemd-tmpfiles-setup.service &lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;||&lt;/span&gt; rm -f &lt;span style=&#34;color: #003333&#34;&gt;$i&lt;/span&gt;; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/multi-user.target.wants/*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /etc/systemd/system/*.wants/*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/local-fs.target.wants/*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/sockets.target.wants/*udev*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/basic.target.wants/*; &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
rm -f /lib/systemd/system/anaconda.target.wants/*;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Install Ansible&lt;/span&gt;
RUN yum -y install epel-release
RUN yum -y install git ansible sudo
RUN yum clean all
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Disable requiretty&lt;/span&gt;
RUN sed -i -e &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;s/^\(Defaults\s*requiretty\)/#--- \1/&amp;#39;&lt;/span&gt;  /etc/sudoers
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Install Ansible inventory file&lt;/span&gt;
RUN &lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;[local]\nlocalhost ansible_connection=local&amp;#39;&lt;/span&gt; &amp;gt; /etc/ansible/hosts
VOLUME &lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/sys/fs/cgroup&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
CMD &lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/sbin/init&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is based a.o. on the &lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;guidelines&lt;/a&gt; for the &lt;code&gt;centos:7&lt;/code&gt; image found on Docker Hub. By default, systemd is not available inside the container, so the code above installs it, albeit in a limited form. After that, Ansible is installed and a basic inventory file is generated.&lt;/p&gt;

&lt;h2 id=&#34;running-the-ansible-test-on-travis-ci:48d64d145fbcb082238fb5b7d00b35e8&#34;&gt;Running the Ansible test on Travis-CI&lt;/h2&gt;

&lt;p&gt;The next step is to configure Travis-CI with a &lt;code&gt;.travis.yml&lt;/code&gt; file. In this stage, I ran into another problem w.r.t. systemd. After building the container, I succeeded in running &lt;code&gt;ansible-playbook&lt;/code&gt;, but the role failed when the service was started:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...A number of succeeding tasks, a.o. installation of httpd...]

TASK: [bertvv.httpd | Ensure Apache is always running] ************************
failed: [localhost] =&amp;gt; {&amp;quot;failed&amp;quot;: true}
msg: no service or tool found for: httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Theres&amp;rsquo;s a &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1033604&#34;&gt;bug report&lt;/a&gt; relating to this issue. Dan Walsh &lt;a href=&#34;https://developerblog.redhat.com/2014/05/05/running-systemd-within-docker-container/&#34;&gt;navigates around this problem&lt;/a&gt; by enabling the service after installation and then running a new container that will start the service at boot time. For our purposes, this is not a feasible solution. Another caveat is that the container should run in privileged mode in order to make systemd work.&lt;/p&gt;

&lt;p&gt;Finally, I got to the following &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo: required

services:
  - docker

before_install:
  &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Fetch base image and build new container&lt;/span&gt;
  - sudo docker pull centos:7
  - sudo docker build --rm=true --tag=travispoc .

script:
  &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Run container in detached state&lt;/span&gt;
  - sudo docker run --detach --privileged --volume=&amp;quot;${PWD}&amp;quot;:/etc/ansible/roles/role_under_test:ro --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro travispoc /usr/lib/systemd/systemd &amp;gt; /tmp/container_id
  &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Check syntax of ansible playbook&lt;/span&gt;
  - sudo docker exec &amp;quot;$(cat /tmp/container_id)&amp;quot; ansible-playbook /etc/ansible/roles/role_under_test/test.yml --syntax-check
  &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Run ansible playbook&lt;/span&gt;
  - sudo docker exec &amp;quot;$(cat /tmp/container_id)&amp;quot; ansible-playbook /etc/ansible/roles/role_under_test/test.yml
  &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Clean up&lt;/span&gt;
  - sudo docker stop &amp;quot;$(cat /tmp/container_id)&amp;quot;

notifications:
  email: false
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;See the result of the build process on the &lt;a href=&#34;https://travis-ci.org/bertvv/travispoc/builds/96155750&#34;&gt;Travis-CI status page&lt;/a&gt;. This configuration pulls down the base image &lt;code&gt;centos:7&lt;/code&gt; and builds the custom container with Ansible installed. The custom container is then run in privileged mode and detached. The current directory (= the project root of the Git project) is mounted inside the container under &lt;code&gt;/etc/ansible/roles/role_under_test/&lt;/code&gt;. The name of the directory is not important, actually, and giving it a generic one makes the code reusable over any role. The &lt;code&gt;docker run&lt;/code&gt; command yields an ID that is written to a temporary file. After that, the test playbook (see below) is executed, once with the &lt;code&gt;--syntax-check&lt;/code&gt; option, and once without (actually applying the role to the container).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Yaml&#34;&gt;# test.yml
---
- hosts: all
  roles:
    - role_under_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The playbook is kept minimal here, but a &lt;code&gt;vars:&lt;/code&gt; section can be added to set role variables. The role is called &lt;code&gt;role_under_test&lt;/code&gt;, consistent with the directory mentioned above.&lt;/p&gt;

&lt;h2 id=&#34;limitations:48d64d145fbcb082238fb5b7d00b35e8&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;In the end, a container is -intentionally- not a full VM, so it does have its limitations. As discussed before, systemd is not available out-of-the-box. Basic services that you expect to be present, like ssh and firewalld aren&amp;rsquo;t installed by default. Another big issue is SELinux. Since this is a kernel extension, I suspect it would interact with the host system. The host system in this case is Travis-CI&amp;rsquo;s Ubuntu box that runs the tests, and that certainly won&amp;rsquo;t have SELinux enabled. I haven&amp;rsquo;t looked into this, but I suspect that in this setting, SELinux will not work inside the container. Please let me know in the comments if I&amp;rsquo;m wrong! Anyway, my roles usually assume SELinux is running, so I suspect it won&amp;rsquo;t be possible to test these on Travis-CI&amp;hellip; In those cases, a solution based on full virtualization like KVM, VirtualBox, etc. is probably more suitable.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:48d64d145fbcb082238fb5b7d00b35e8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, I discussed a proof of concept for testing Ansible roles on CentOS using Travis-CI. The code can be found on &lt;a href=&#34;https://github.com/bertvv/travispoc&#34;&gt;https://github.com/bertvv/travispoc&lt;/a&gt; and is tagged &lt;code&gt;centos&lt;/code&gt; (See the &lt;a href=&#34;https://github.com/bertvv/travispoc/tags&#34;&gt;tags page&lt;/a&gt;). Although there are some limitations (SELinux being a notable one), Travis-CI is usable as a testing platform in this setting.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s probably for improvement. I probably did things in a suboptimal way, because I&amp;rsquo;m still new to both Travis-CI and Docker, so suggestions are welcome! You can leave a comment below, create an issue on the Github project or send me a pull request.&lt;/p&gt;

&lt;p&gt;In a next blog post, we&amp;rsquo;ll extend this solution for running tests on multiple platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; There was a major flaw in the code of the original version of this post. It installed the role under test from Ansible Galaxy instead of running on the &lt;em&gt;current&lt;/em&gt; commit. The &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;.travis.yml&lt;/code&gt; were adapted to fix this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating `mysql_secure_installation`</title>
      <link>https://bertvv.github.io/notes-to-self/2015/11/16/automating-mysql_secure_installation</link>
      <pubDate>Mon, 16 Nov 2015 16:07:42 CET</pubDate>
      <author>Bert Van Vreckem</author>
      <guid>https://bertvv.github.io/notes-to-self/2015/11/16/automating-mysql_secure_installation</guid>
      <description>

&lt;p&gt;Many HOWTO&amp;rsquo;s and blog posts about installing MySQL/MariaDB, a LAMP stack, etc. suggest to run the script &lt;code&gt;mysql_secure_installation&lt;/code&gt; to tighten the security holes in the default installation of the database engine. This includes setting a root password (empty by default), removing anonymous users, and deleting a test database. For a database server that you&amp;rsquo;re going to run in production, it is really important to do this. However, I have a problem with the fact that &lt;code&gt;mysql_secure_installation&lt;/code&gt; is interactive, i.e. it asks for user input. This makes it very hard to include it in an automated setup. In this post, we&amp;rsquo;ll discuss how the script works and how we can automate what it does.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://serverfault.com/questions/593508/how-to-pass-input-from-one-script-into-another-using-bash&#34;&gt;One approach&lt;/a&gt; to automating &lt;code&gt;mysql_secure_installation&lt;/code&gt; consists of using the &lt;a href=&#34;http://linux.die.net/man/1/expect&#34;&gt;&lt;code&gt;expect(1)&lt;/code&gt;&lt;/a&gt; tool that can &amp;ldquo;sense&amp;rdquo; when the user is asked for input and can inject the appropriate response. This is a kludge and should be avoided. Expect is written in the scripting language Tcl/Tk, which is typically not installed by default. So installing &lt;code&gt;expect(1)&lt;/code&gt; also pulls in dependencies that have no added value to the functionality of the system itself. Installing unneccesary software is a &lt;a href=&#34;http://www.cyberciti.biz/tips/linux-security.html&#34;&gt;bad security practice&lt;/a&gt;. Expect also adds an unnecessary layer of complexity to a script that is already too complicated to begin with. If the &lt;code&gt;mysql_secure_installation&lt;/code&gt; script was written in a way that was more friendly towards automation, it wouldn&amp;rsquo;t be needed at all.&lt;/p&gt;

&lt;p&gt;A better approach is to have a look at what the script actually does and then automating that. The MariaDB source code is hosted on Github and the &lt;code&gt;mysql_secure_installation&lt;/code&gt; script can be &lt;a href=&#34;https://github.com/MariaDB/server/blob/5.5/scripts/mysql_secure_installation.sh&#34;&gt;found here&lt;/a&gt;. The script consists of lots of code to inform the user and interpret user input which are cruft for our purposes. The gems are the SQL statements scattered throughout the code. Look for the string &lt;code&gt;do_query&lt;/code&gt; to find them. The queries will perform the following actions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set a password for the database &amp;ldquo;root&amp;rdquo; user (different from the Linux root user!), which is blank by default;&lt;/li&gt;
&lt;li&gt;Delete &amp;ldquo;anonymous&amp;rdquo; users, i.e. users with the empty string as user name;&lt;/li&gt;
&lt;li&gt;Ensure the root user can not log in remotely;&lt;/li&gt;
&lt;li&gt;Remove the database named &amp;ldquo;test&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Flush the privileges tables, i.e. ensure that the changes to user access applied in the previous steps are committed immediately.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is only one input that should come from the system administrator and that is the database root password. The other steps can be automated without any interaction with the user.&lt;/p&gt;

&lt;p&gt;In the sections below, these steps are explained in more detail, and after that, I&amp;rsquo;ll show how to automate them.&lt;/p&gt;

&lt;h2 id=&#34;setting-the-database-root-password:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Setting the database root password&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s actually (at least) two ways of doing this: using the SQL query (like the &lt;code&gt;mysql_secure_installation&lt;/code&gt; script does), or by using the &lt;code&gt;mysqladmin&lt;/code&gt; command. The SQL statement can e.g. be executed within the &lt;a href=&#34;http://linux.die.net/man/1/mysql&#34;&gt;&lt;code&gt;mysql(1)&lt;/code&gt;&lt;/a&gt; client tool that can be accessed with the command:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The option &lt;code&gt;-u&lt;/code&gt; specifies the user (&lt;code&gt;root&lt;/code&gt;), the option &lt;code&gt;-p&lt;/code&gt; prompts for a password. You can just press ENTER now, but later, when you have set the root password, you will of course need to type it.&lt;/p&gt;

&lt;p&gt;The SQL command to set the root password, copied from the script source, is:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; mysql.&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;SET&lt;/span&gt; Password&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;PASSWORD(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;my_new_password&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;my_new_password&lt;/code&gt; with the desired password.&lt;/p&gt;

&lt;p&gt;The alternative method is the &lt;a href=&#34;http://linux.die.net/man/1/mysqladmin&#34;&gt;&lt;code&gt;mysqladmin(1)&lt;/code&gt;&lt;/a&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;mysqladmin password &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;my_new_password&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;delete-anonymous-users:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Delete anonymous users&lt;/h2&gt;

&lt;p&gt;In the default installation includes anonymous users, apparently for testing. These should be removed before putting the database server into production, as it allows to access the database without a password. Anonymous users have an empty user name and can be deleted with the following SQL statement (from &lt;code&gt;mysql_secure_installation&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt; mysql.&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ensure-the-root-user-can-not-log-in-remotely:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Ensure the root user can not log in remotely&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s always a good idea to limit access for the database root user to localhost for added security. This won&amp;rsquo;t even affect a setup with &lt;a href=&#34;https://www.phpmyadmin.net/&#34;&gt;phpMyAdmin&lt;/a&gt; if it&amp;rsquo;s installed on the same host!&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt; mysql.&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;::1&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;remove-the-test-database:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Remove the test database&lt;/h2&gt;

&lt;p&gt;The default installation contains a database with the name &lt;code&gt;test&lt;/code&gt; (with associated user privileges). These should also be deleted before putting the database into production:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;DATABASE&lt;/span&gt; test;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt; mysql.db &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; Db&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;OR&lt;/span&gt; Db&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;test\_%&amp;#39;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The first statement removes the database, the second privileges on the database.&lt;/p&gt;

&lt;h2 id=&#34;flush-the-privileges-tables:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Flush the privileges tables&lt;/h2&gt;

&lt;p&gt;The statements above that change user access to the database &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/privilege-changes.html&#34;&gt;have no immediate effect&lt;/a&gt;. The following command will commit the changes:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;FLUSH &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;PRIVILEGES&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Without flushing the privilege tables, the root password will remain unset.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;We can execute all the SQL statements above with the following code snippet:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;myql --user&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;lt;&amp;lt;_EOF_&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;UPDATE mysql.user SET Password=PASSWORD(&amp;#39;${db_root_password}&amp;#39;) WHERE User=&amp;#39;root&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;DELETE FROM mysql.user WHERE User=&amp;#39;&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;DELETE FROM mysql.user WHERE User=&amp;#39;root&amp;#39; AND Host NOT IN (&amp;#39;localhost&amp;#39;, &amp;#39;127.0.0.1&amp;#39;, &amp;#39;::1&amp;#39;);&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;DROP DATABASE IF EXISTS test;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;DELETE FROM mysql.db WHERE Db=&amp;#39;test&amp;#39; OR Db=&amp;#39;test\\_%&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;FLUSH PRIVILEGES;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;_EOF_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The SQL commands are passed to &lt;code&gt;mysql(1)&lt;/code&gt; in a &lt;a href=&#34;http://tldp.org/LDP/abs/html/here-docs.html&#34;&gt;here document&lt;/a&gt;. The variable &amp;lsquo;${db_root_password}&amp;rsquo; needs to be set. I&amp;rsquo;ve written a more elaborate shell script that takes the value of the database root password from the command line and has some checks in place. The full source can be found below:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#! /bin/sh&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Author: Bert Van Vreckem &amp;lt;bert.vanvreckem@gmail.com&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# A non-interactive replacement for mysql_secure_installation&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Tested on CentOS 6, CentOS 7, Ubuntu 12.04 LTS (Precise Pangolin), Ubuntu&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# 14.04 LTS (Trusty Tahr).&lt;/span&gt;

&lt;span style=&#34;color: #336666&#34;&gt;set&lt;/span&gt; -o errexit &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# abort on nonzero exitstatus&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;set&lt;/span&gt; -o nounset &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# abort on unbound variable&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#{{{ Functions&lt;/span&gt;

usage&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
cat &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;lt;&amp;lt; _EOF_&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;Usage: ${0} &amp;quot;ROOT PASSWORD&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;  with &amp;quot;ROOT PASSWORD&amp;quot; the desired password for the database root user.&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;Use quotes if your password contains spaces or other special characters.&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;_EOF_&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Predicate that returns exit status 0 if the database root password&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# is set, a nonzero exit status otherwise.&lt;/span&gt;
is_mysql_root_password_set&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
  ! mysqladmin --user&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;root status &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Predicate that returns exit status 0 if the mysql(1) command is available,&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# nonzero exit status otherwise.&lt;/span&gt;
is_mysql_command_available&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
  which mysql &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#}}}&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#{{{ Command line parsing&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;$#&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; -ne &amp;quot;&lt;/span&gt;1&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot; ]; then&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  echo &amp;quot;&lt;/span&gt;Expected &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; argument, got &lt;span style=&#34;color: #003333&#34;&gt;$#&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
  usage
  &lt;span style=&#34;color: #336666&#34;&gt;exit &lt;/span&gt;2
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#}}}&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#{{{ Variables&lt;/span&gt;
&lt;span style=&#34;color: #003333&#34;&gt;db_root_password&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#}}}&lt;/span&gt;

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Script proper&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; ! is_mysql_command_available; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;then&lt;/span&gt;
  &lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;The MySQL/MariaDB client mysql(1) is not installed.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #336666&#34;&gt;exit &lt;/span&gt;1
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; is_mysql_root_password_set; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;then&lt;/span&gt;
  &lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Database root password already set&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #336666&#34;&gt;exit &lt;/span&gt;0
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;fi&lt;/span&gt;

mysql --user&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;lt;&amp;lt;_EOF_&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  UPDATE mysql.user SET Password=PASSWORD(&amp;#39;${db_root_password}&amp;#39;) WHERE User=&amp;#39;root&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  DELETE FROM mysql.user WHERE User=&amp;#39;&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  DELETE FROM mysql.user WHERE User=&amp;#39;root&amp;#39; AND Host NOT IN (&amp;#39;localhost&amp;#39;, &amp;#39;127.0.0.1&amp;#39;, &amp;#39;::1&amp;#39;);&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  DROP DATABASE IF EXISTS test;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  DELETE FROM mysql.db WHERE Db=&amp;#39;test&amp;#39; OR Db=&amp;#39;test\\_%&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  FLUSH PRIVILEGES;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;_EOF_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I also put the script on Github, in my &lt;a href=&#34;https://github.com/bertvv/scripts/&#34;&gt;scripts repository&lt;/a&gt;. If I modify/improve the script in the future, you can find the newer versions there.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:b58024812153d4d2edd10a4a8e18b19c&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;mysql_secure_installation&lt;/code&gt; script makes the installation of MariaDB/MySQL more secure and the actions that it performs &lt;em&gt;should always&lt;/em&gt; be applied to database servers that you put into production. However, by making the script interactive, it has become unnecessarily complicated. Worse, it&amp;rsquo;s an obstruction in our quest to &amp;ldquo;Automate All the Things&amp;trade;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m certainly &lt;a href=&#34;https://gist.github.com/Mins/4602864#gistcomment-1294952&#34;&gt;not the first one&lt;/a&gt; to suggest a non-interactive script that does the same as &lt;code&gt;mysql_secure_installation&lt;/code&gt;, but I haven&amp;rsquo;t seen this approach actually being encouraged. I hope this post at least adds to the discussion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing VirtualBox Guest Additions in Fedora 22</title>
      <link>https://bertvv.github.io/notes-to-self/2015/10/08/installing-virtualbox-guest-additions-in-fedora-22</link>
      <pubDate>Thu, 08 Oct 2015 19:06:48 CEST</pubDate>
      <author>Bert Van Vreckem</author>
      <guid>https://bertvv.github.io/notes-to-self/2015/10/08/installing-virtualbox-guest-additions-in-fedora-22</guid>
      <description>

&lt;p&gt;VirtualBox Guest additions are a set of drivers that you can install on virtual machines to enable a few cool features: a scaling desktop in the VM, shared clipboard, shared folders, etc. This post discusses how to install these in Fedora 22.&lt;/p&gt;

&lt;p&gt;You can easily find other HOWTO&amp;rsquo;s that describe the installation process. For example, I like the one on &lt;a href=&#34;http://www.if-not-true-then-false.com/2010/install-virtualbox-guest-additions-on-fedora-centos-red-hat-rhel/&#34;&gt;If Not True Then False&lt;/a&gt;. That one covers quite a few versions of Fedora and CentOS, which may be confusing for beginning Linux users. This post focuses on recent Fedora versions, specifically Fedora 22 and newer, where &lt;code&gt;yum&lt;/code&gt; is replaced by &lt;code&gt;dnf&lt;/code&gt; as the package management tool.&lt;/p&gt;

&lt;h2 id=&#34;installation-procedure:d27ff6edcf0235db4a3bcb73c2e83780&#34;&gt;Installation procedure&lt;/h2&gt;

&lt;p&gt;Open a terminal (click Activities and type &amp;ldquo;Terminal&amp;rdquo;) and execute the following commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, update the kernel:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;sudo dnf upgrade kernel*
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reboot the VM when a new kernel version was installed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install some packages needed for the installation:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;sudo dnf install dkms kernel-headers kernel-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &amp;ldquo;Devices&amp;rdquo; menu in the VM window and select &amp;ldquo;Insert Guest Additions CD Image&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vboxadditions-instert-cd.png&#34; alt=&#34;Devices &amp;gt; Insert Guest Additions CD Image&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &amp;ldquo;Run&amp;rdquo; in the Autorun dialog box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vboxadditions-autorun.png&#34; alt=&#34;Autorun dialog box&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A terminal window will open that informs you of the installation process. Look for &lt;code&gt;[  OK  ]&lt;/code&gt; and &lt;code&gt;[FAILED]&lt;/code&gt; in the output. If you followed the instructions, you should only see &lt;code&gt;[  OK  ]&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vboxadditions-installation.png&#34; alt=&#34;Guest Additions Installation&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Log out (the menu in the top right corner of the screen, click your user name and choose Log out) and back in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VirtualBox Networking: an overview</title>
      <link>https://bertvv.github.io/notes-to-self/2015/09/29/virtualbox-networking-an-overview</link>
      <pubDate>Tue, 29 Sep 2015 20:58:28 CEST</pubDate>
      <author>Bert Van Vreckem</author>
      <guid>https://bertvv.github.io/notes-to-self/2015/09/29/virtualbox-networking-an-overview</guid>
      <description>

&lt;p&gt;One of the greatest pitfalls when working with VirtualBox VMs is a good understanding of how networking works. In this post, we&amp;rsquo;ll discuss the most important differences between them, and their limitations when you use VirtualBox to experiment with setting up network services on a VM.&lt;/p&gt;

&lt;p&gt;In our system administration courses, we use VirtualBox to allow students to set up their own Linux machines without having to resort to dual booting. VirtualBox is certainly not the &amp;ldquo;best&amp;rdquo; virtualization platform, but it is supported on the three common desktop platforms and works similarly on all of them.&lt;/p&gt;

&lt;h1 id=&#34;overview:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;A VirtualBox VM can be assigned 4 network adapters from the GUI (Machine &amp;gt; Settings &amp;gt; Network), and even more from the command line. In a VirtualBox VM with EL7, the network interfaces are usually named as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adapter 1: &lt;code&gt;enp0s3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adapter 2: &lt;code&gt;enp0s8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adapter 3: &lt;code&gt;enp0s9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adapter 4: &lt;code&gt;enp0s10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can choose the type of adapter between:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Network Adress Translation (NAT):&lt;/strong&gt; The VM is in an isolated network and has an Internet link through a virtual gateway. There is no route from the host system to the VM, though. &lt;em&gt;This is the best way to ensure your VM has Internet access.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAT Network:&lt;/strong&gt; Like the previous type, but network traffic between VMs in the same NAT network is possible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridged (Br):&lt;/strong&gt; The VM gets direct access to the physical network adapter of the host system. If a DHCP server is active on the network, the VM will get an IP within the same range as the host system. For other hosts on this network, the VM appears as just another host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host only (HO):&lt;/strong&gt; The host system and the VM are attached to a configurable virtual network (File &amp;gt; Preferences &amp;gt; Network &amp;gt; Host-only Networks). You can even set up a virtual DHCP server that issues your VMs with an IP address. Consequently, network traffic between hosts and VMs is possible. However, there is no gateway to the Internet in a host-only network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal (Int):&lt;/strong&gt; VMs are attached to a virtual network, but the host system is not. There is also no gateway to the Internet, nor is DHCP provided.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The table below gives an overview of the consequences of each adapter on network routing between the VM and the rest of the world.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Route&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;NAT&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;HO&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Br&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Int&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VM â Host&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VM â VM&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VM â LAN&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VM â Internet&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At first sight, the &lt;em&gt;Bridged adapter&lt;/em&gt; appears to be the most suitable for setting up a network service in a VM, but this is not the case. Read on to find out why!&lt;/p&gt;

&lt;p&gt;In the sections below, each adapter type is discussed in more detail, including the network settings that you can expect.&lt;/p&gt;

&lt;h1 id=&#34;the-nat-interface:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;The NAT interface&lt;/h1&gt;

&lt;p&gt;The VirtualBox &lt;a href=&#34;http://www.virtualbox.org/manual/ch06.html#network_nat&#34;&gt;NAT adapter&lt;/a&gt;
is the default way of allowing your VM to access the Internet. However, it is normally not possible to access your VM from the host system over the network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vbnat.png&#34; alt=&#34;The NAT interface: most reliable way to give your VM internet access&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The network settings of your VM are predictable. Any VM with a NAT interface has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IP Address: 10.0.2.15 / 24&lt;/li&gt;
&lt;li&gt;Default gateway: 10.0.2.2 / 24&lt;/li&gt;
&lt;li&gt;Name server: 10.0.2.3 / 24 (potentially supplemented with the name servers assigned to your host system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can ping the gateway and name server from the VM, but pinging 10.0.2.15 from your host system will &lt;em&gt;never&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;The NAT adapter is the most reliable to give your VM Internet access. If your host system can get on the net, your VM can as well.  There is one exception: when you switch your host system between a wired and a wireless adapter while the VM is running, the latter will lose its access.&lt;/p&gt;

&lt;h1 id=&#34;the-host-only-interface:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;The Host-only interface&lt;/h1&gt;

&lt;p&gt;The VirtualBox &lt;a href=&#34;http://www.virtualbox.org/manual/ch06.html#network_hostonly&#34;&gt;host-only adapter&lt;/a&gt; allows network traffic between your host system and a VM. A virtual Ethernet interface is created that is also visible on your host system. You can create multiple host-only adapters and configure network settings from the main window by opening File &amp;gt; Preferences &amp;gt; Network &amp;gt; Host-only Networks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vbho.png&#34; alt=&#34;The Host-only interface: a virtual network between host and VMs&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A host-only interface is named:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On Linux: &lt;code&gt;vboxnet0&lt;/code&gt;, &lt;code&gt;vboxnet1&lt;/code&gt;, &amp;hellip;&lt;/li&gt;
&lt;li&gt;On Windows: &amp;ldquo;VirtualBox Host-only Ethernet Interface&amp;rdquo;. &amp;ldquo;VirtualBox Host-only Ethernet Interface #2&amp;rdquo;, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first host-only network that you create, will have the following default settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adapter

&lt;ul&gt;
&lt;li&gt;IPv4 Address: 192.168.56.1 (= the IP-address assigned to your host system)&lt;/li&gt;
&lt;li&gt;IPv4 Network Mask: 255.255.255.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DHCP-server: enabled

&lt;ul&gt;
&lt;li&gt;server address: 192.168.56.100 (= the IP address of a virtual DHCP server)&lt;/li&gt;
&lt;li&gt;Server Mask: 255.255.255.0&lt;/li&gt;
&lt;li&gt;Lower bound: 192.168.56.101&lt;/li&gt;
&lt;li&gt;Upper bound: 192.168.56.254&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If a VM is configured to get an IP address automatically (i.e. via DHCP), it will probably get 192.168.56.101 (if it&amp;rsquo;s the first VM on this host-only network). You can use the range 2-99 to assign static IP addresses to your VMs.&lt;/p&gt;

&lt;p&gt;It should be possible to ping between the host system and VMs on the same host-only network. If not, check whether your IP settings are correct: are they all attached to the same host only network? Do they have the expected IP address? Is the DHCP server for the host-only network active?&lt;/p&gt;

&lt;p&gt;I strongly suggest to leave the default host-only interface as is, and create new interfaces when you want to work with other IP ranges. It may be needed to shut down all VMs and restart VirtualBox for configuration changes to come into effect, especially after creating a new interface.&lt;/p&gt;

&lt;h1 id=&#34;the-bridged-interface:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;The Bridged interface&lt;/h1&gt;

&lt;p&gt;As mentioned before, the &lt;a href=&#34;https://www.virtualbox.org/manual/ch06.html#network_bridged&#34;&gt;bridged&lt;/a&gt; interface gives the VM access to the physical network on which the host system is attached. Other hosts on the LAN can likewise communicate with the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bertvv.github.io/notes-to-self/img/vbbridged.png&#34; alt=&#34;The bridged interface: the VMs get immediate access to the physical network&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;At first sight, this is the ideal setting for setting up a network service on a VM. However, there are big limitations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re on a laptop and move between networks (home, work, &amp;hellip;), the network address changes. Consequently, your VM will get another IP address (when it uses DHCP), or you need to reconfigure it manually.&lt;/li&gt;
&lt;li&gt;On some networks, the DHCP server will only assign an IP address to hosts with a registered MAC address. So it&amp;rsquo;s possible that your VM doesn&amp;rsquo;t get an IP. Setting one manually is dangerous, as it may collide with the IP of another host on the LAN (unless the network is under your own control).&lt;/li&gt;
&lt;li&gt;Bridging over a wireless interface is limited, and often doesn&amp;rsquo;t work at all&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;recommendation-nat-host-only:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;Recommendation: NAT + Host-only&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re setting up a network service on a VM that you at least want to access from your host system, this leaves you in a bit of a pickle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The NAT adapter doesn&amp;rsquo;t allow you to access the VM from the host&lt;/li&gt;
&lt;li&gt;The host-only adapter does, but your VM doesn&amp;rsquo;t have Internet access (so installing packages is kind of hard)&lt;/li&gt;
&lt;li&gt;The bridged interface is too unreliable: the VM&amp;rsquo;s IP address depends on the physical LAN, if it gets one at all&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, no single adapter type is ideal. My recommendation then is to always give your VM &lt;strong&gt;two&lt;/strong&gt; adapters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adapter 1 is attached to an NAT interface, so your VM has Internet access and can install packages from on-line repositories;&lt;/li&gt;
&lt;li&gt;Adapter 2 is attached to a host-only interface, so you can access the server from the host system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another advantage is that you can give your VM a static IP that remains when you export the VM in order to pass it on to someone else.&lt;/p&gt;

&lt;p&gt;The VM is not accessible from the &lt;em&gt;physical&lt;/em&gt; LAN, but seen from a security standpoint, that&amp;rsquo;s more of an advantage&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;finally:fc5e5586f11d39e89379de40fcf44f1e&#34;&gt;Finally&amp;hellip;&lt;/h1&gt;

&lt;p&gt;The NAT network and internal interfaces aren&amp;rsquo;t discussed in this article, they aren&amp;rsquo;t used as often as the other ones. Be sure to read the &lt;a href=&#34;https://www.virtualbox.org/manual/ch06.html&#34;&gt;VirtualBox documentation&lt;/a&gt; if you want to delve deeper into the subject!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
